#include <stdio.h>
#include <string.h>
#include <panic.h>

#include "wasm_libs.h"

#define WASM_LIBS_FUNCTION_HANDLE_MAX_LENGTH (255)

static wasm_module_inst_t wasm_module_inst = NULL;

void wasm_libs_set_wasm_module_inst(wasm_module_inst_t module_inst) {
    wasm_module_inst = module_inst;
}
{% for library in libraries.values() %}
    {%- for handle in library.function_handles.values() %}
static char function_handle_next_function_name_{{ library.name }}_{{ handle.name }}[WASM_LIBS_FUNCTION_HANDLE_MAX_LENGTH + 1] = {'\0'};
static {{ handle.return_type }} function_handle_internal_function_{{ library.name }}_{{ handle.name }}(
        {%- if handle.parameters|length == 0 %}void{% endif -%}
        {%- for parameter in handle.parameters.values() %}
    {{ parameter.type }} {{ parameter.name }}{% if not loop.last %}, {% endif %}
        {%- endfor %}
) {
    if (wasm_module_inst == NULL) {
        core_panic(PANIC_GENERAL_ERROR, "wasm_libs: WASM module instance is not set (use wasm_libs_set_wasm_module_inst)");
    }

    // get environment
    wasm_exec_env_t wasm_exec_env = wasm_runtime_get_exec_env_singleton(wasm_module_inst);

    // lookup function handle in WASM runtime namespace
    wasm_function_inst_t wasm_function_inst = wasm_runtime_lookup_function(
        wasm_module_inst,
        (const char*) function_handle_next_function_name_{{ library.name }}_{{ handle.name }}
    );
    if (wasm_function_inst == NULL) {
        char msg[512] = {'\0'};
        sprintf(msg, "wasm_libs: lookup of function '%s' failed", function_handle_next_function_name_{{ library.name }}_{{ handle.name }});
        core_panic(PANIC_GENERAL_ERROR, msg);
    }

    // construct parameters for upcoming function call
    size_t num_args = {{ handle.parameters|length }};
    wasm_val_t args[{{ [handle.parameters|length, 1]|max }}];
        {%- for param in handle.parameters.values() %}
            {%- if param.get_wasm_runtime_signature() == '$' %}
                {# TODO 32bit memory model assumed, might become variable in the future #}
    args[{{ loop.index0 }}].kind = WASM_I32;
    args[{{ loop.index0 }}].of.i32 = (int32_t) wasm_runtime_module_dup_data(wasm_module_inst, (const char*) {{ param.name }}, strlen((const char*) str));
            {%- elif param.is_byte_array() -%}
                {# we need to ensure there is a length parameter, and it is of number type #}
                {%- if param.length_parameter not in handle.parameters -%}
                    {% raise "library '" ~ library.name ~ "', function handle '" ~ handle.name ~ "', parameter '" ~ param.name ~ "': length parameter '" ~ param.length_parameter ~ "' does not exist as parameter" %}
                {%- endif -%}
                {%- if not handle.parameters[param.length_parameter].is_integer() -%}
                    {% raise "library '" ~ library.name ~ "', function handle '" ~ handle.name ~ "', parameter '" ~ param.name ~ "': length parameter '" ~ param.length_parameter ~ "' is not an integer" %}
                {%- endif -%}

                {# considering pointer length already even though WAMR is 32bit memory model atm #}
                {%- if param.get_wasm_runtime_signature() == 'i' %}
    args[{{ loop.index0 }}].kind = WASM_I32;
    args[{{ loop.index0 }}].of.i32 = (int32_t) wasm_runtime_module_dup_data(wasm_module_inst, (const char*) {{ param.name }}, {{ param.length_parameter }});
                {%- else -%}
    args[{{ loop.index0 }}].kind = WASM_I64;
    args[{{ loop.index0 }}].of.i64 = (int64_t) wasm_runtime_module_dup_data(wasm_module_inst, (const char*) {{ param.name }}, {{ param.length_parameter }});
                {%- endif -%}
            {%- elif param.get_wasm_runtime_signature() == 'i' %}
    args[{{ loop.index0 }}].kind = WASM_I32;
    args[{{ loop.index0 }}].of.i32 = (int32_t) {{ param.name }};
            {%- elif param.get_wasm_runtime_signature() == 'I' %}
    args[{{ loop.index0 }}].kind = WASM_I64;
    args[{{ loop.index0 }}].of.i64 = (int64_t) {{ param.name }};
            {%- elif param.get_wasm_runtime_signature() == 'f' %}
    args[{{ loop.index0 }}].kind = WASM_f32;
    args[{{ loop.index0 }}].of.f32 = (float) {{ param.name }};
            {%- elif param.get_wasm_runtime_signature() == 'F' %}
    args[{{ loop.index0 }}].kind = WASM_f64;
    args[{{ loop.index0 }}].of.f64 = (double) {{ param.name }};
            {%- else -%}
                {% raise "library '" ~ library.name ~ "', function handle '" ~ handle.name ~ "', parameter '" ~ param.name ~ "': unsupported type '" ~ param.type ~ "' (Maybe it is a function handle? Function handles as parameters of function handles not supported yet.)" %}
            {%- endif -%}
        {%- endfor %}

    // make space for return value
    size_t num_results = {% if handle.return_type == 'void' %}0{% else %}1{% endif %};
    wasm_val_t results[1];

    // call function handle
    if (!wasm_runtime_call_wasm_a(wasm_exec_env, wasm_function_inst, num_results, results, num_args, args)) {
        const char* exception = 0;
        if ((exception = wasm_runtime_get_exception(wasm_module_inst))) {
            char msg[512] = {'\0'};
            sprintf(msg, "wasm_libs: function '%s' throw an exception: %s", function_handle_next_function_name_{{ library.name }}_{{ handle.name }}, exception);
            core_panic(PANIC_GENERAL_ERROR, msg);
        }
    }

    // cleanup
        {%- for param in handle.parameters.values() %}
            {%- if param.get_wasm_runtime_signature() == '$' or param.is_byte_array() -%}
                {# TODO 32bit memory model assumed for strings ($), might become variable in the future #}
                {%- if param.get_wasm_runtime_signature() == 'i' or param.get_wasm_runtime_signature() == '$' %}
    wasm_runtime_module_free(wasm_module_inst, (uint64_t) args[{{ loop.index0 }}].of.i32);
                {%- else %}
    wasm_runtime_module_free(wasm_module_inst, (uint64_t) args[{{ loop.index0 }}].of.i64);
                {%- endif -%}
            {%- endif -%}
        {%- endfor %}

        {%- if handle.return_type != 'void' -%}
            {%- if handle.get_wasm_runtime_signature_for_return_type() == '$' or handle.returns_byte_array() -%}
                {# considering pointer length already even though WAMR is 32bit memory model atm #}
                {# TODO 32bit memory model assumed for strings ($), might become variable in the future #}
                {%- if handle.get_wasm_runtime_signature_for_return_type() == 'i' or handle.get_wasm_runtime_signature_for_return_type() == '$' %}
    
    if (!wasm_runtime_validate_app_addr(wasm_module_inst, results[0].of.i32, sizeof(results[0].of.i32))) {
        char msg[512] = {'\0'};
        sprintf(msg, "wasm_libs: function handle '%s' returned pointer outside of WASM memory region", function_handle_next_function_name_{{ library.name }}_{{ handle.name }});
        core_panic(PANIC_GENERAL_ERROR, msg);
    }
    //TODO if not a string, check if not only the beginning but the whole range is in the VM memory, and btw we do not care about the VM messing up type boundaries
    return ({{ handle.return_type }}) wasm_runtime_addr_app_to_native(wasm_module_inst, results[0].of.i32);                   
                {%- else %}
    
    if (!wasm_runtime_validate_app_addr(wasm_module_inst, results[0].of.i64, sizeof(results[0].of.i64))) {
        char msg[512] = {'\0'};
        sprintf(msg, "wasm_libs: function handle '%s' returned pointer outside of WASM memory region", function_handle_next_function_name_{{ library.name }}_{{ handle.name }});
        core_panic(PANIC_GENERAL_ERROR, msg);
    }
    //TODO if not a string, check if not only the beginning but the whole range is in the VM memory, and btw we do not care about the VM messing up type boundaries
    return ({{ handle.return_type }}) wasm_runtime_addr_app_to_native(wasm_module_inst, results[0].of.i64);
                {%- endif -%}
            {%- elif handle.get_wasm_runtime_signature_for_return_type() == 'i' %}
    
    return ({{ handle.return_type }}) results[0].of.i32;
            {%- elif handle.get_wasm_runtime_signature_for_return_type() == 'I' %}
    
    return ({{ handle.return_type }}) results[0].of.i64;
            {%- elif handle.get_wasm_runtime_signature_for_return_type() == 'f' %}
    
    return ({{ handle.return_type }}) results[0].of.f32;
            {%- elif handle.get_wasm_runtime_signature_for_return_type() == 'F' %}
    
    return ({{ handle.return_type }}) results[0].of.f64;
            {%- else -%}
                {% raise "library '" ~ library.name ~ "', function handle '" ~ handle.name ~ "', return type: unsupported type '" ~ handle.return_type ~ "' (Maybe it is a function handle? Function handles as parameters of function handles not supported yet.)" %}
            {%- endif -%}
        {%- endif %}
}
    {% endfor %}

    {%- for function in library.functions.values() %}
{{ function.return_type }} {{ library.name }}_{{ function.name }}_native(wasm_exec_env_t exec_env{% for parameter in function.parameters.values() %}, {% if parameter.is_function_handle() %}const char*{% else %}{{ parameter.type }}{% endif %} {{ parameter.name }}{% endfor %}) {
    (void) exec_env;

    // prepare parameters
    {%- for parameter in function.parameters.values() %}
        {%- if parameter.is_function_handle() %}
    if (strlen({{ parameter.name }}) > WASM_LIBS_FUNCTION_HANDLE_MAX_LENGTH) {
        core_panic(PANIC_GENERAL_ERROR, "wasm_libs: function handle name is too long (> WASM_LIBS_FUNCTION_HANDLE_MAX_LENGTH)");
    }
    strcpy(function_handle_next_function_name_{{ library.name }}_{{ library.function_handles[parameter.type].name }}, {{ parameter.name }});
        {%- elif parameter.is_byte_array() -%}
            {# we need to ensure there is a length parameter, and it is of number type #}
            {%- if parameter.length_parameter not in function.parameters -%}
                {% raise "library '" ~ library.name ~ "', function '" ~ function.name ~ "', parameter '" ~ parameter.name ~ "': length parameter '" ~ parameter.length_parameter ~ "' does not exist as parameter" %}
            {%- endif -%}
            {%- if not function.parameters[parameter.length_parameter].is_integer() -%}
                {% raise "library '" ~ library.name ~ "', function '" ~ function.name ~ "', parameter '" ~ parameter.name ~ "': length parameter '" ~ parameter.length_parameter ~ "' is not an integer" %}
            {%- endif %}
    if (wasm_module_inst == NULL) {
        core_panic(PANIC_GENERAL_ERROR, "wasm_libs: WASM module instance is not set (use wasm_libs_set_wasm_module_inst)");
    }
    if (!wasm_runtime_validate_app_addr(wasm_module_inst, (uintptr_t) {{ parameter.name }}, sizeof({{ parameter.name }}))) {
        core_panic(PANIC_GENERAL_ERROR, "wasm_libs: function '{{ library.prefix }}{{ function.name }}' was called with a pointer parameter that points outside of WASM memory region");
    }
    //TODO check if not only the beginning but the whole range is in the VM memory, and btw we do not care about the VM messing up type boundaries
    {{ parameter.name }} = ({{ parameter.type }}) wasm_runtime_addr_app_to_native(wasm_module_inst, (uintptr_t) {{ parameter.name }});
        {%- endif -%}
    {%- endfor %}

    // call function
    {% if function.return_type != 'void' %}{{ function.return_type }} res = {% endif %}{{ function.original_name }}(
    {%- for parameter in function.parameters.values() -%}
        {%- if parameter.is_function_handle() %}
        function_handle_internal_function_{{ library.name }}_{{ library.function_handles[parameter.type].name }}{% if not loop.last %}, {% endif %}
        {%- else %}
        {{ parameter.name }}{% if not loop.last %}, {% endif %}
        {%- endif %}
    {%- endfor %}
    );

    {%- if function.return_type != 'void' %}

    return res;
    {%- endif %}
}
// union just to avoid ISO C warning when initializing void* with function pointer
// (on some systems, function pointers may be different from data pointers so this might not be universal)
static union {
    void* void_ptr;
    {{ function.return_type }} (*func_ptr)(wasm_exec_env_t{% for parameter in function.parameters.values() %}, {% if parameter.is_function_handle() %}const char*{% else %}{{ parameter.type }}{% endif %}{% endfor %});
} {{ library.name }}_{{ function.name }}_ptr = {
    .func_ptr = {{ library.name }}_{{ function.name }}_native
};
    {% endfor %}
{% endfor %}

{%- for library in libraries.values() %}
static NativeSymbol native_symbols_{{ library.name }}_library[] = {
    {% for function in library.functions.values() -%}
    {
        "{{ library.prefix }}{{ function.name }}",
        NULL, // function pointer, will be set in `wasm_runtime_register_{{ library.name }}_natives()`
        "{{ function.get_wasm_runtime_signature() }}", // {{ function.return_type }} {{ library.prefix }}{{ function.name }}({% for parameter in function.parameters.values() %}{{ parameter.name }}{% if not loop.last %}, {% endif %}{% endfor %})
        NULL
    }{% if not loop.last %},{% endif %}
    {% endfor %}
};
static int num_native_symbols_{{ library.name }}_library = sizeof(native_symbols_{{ library.name }}_library) / sizeof(NativeSymbol);
{% endfor %}

{%- for library in libraries.values() %}
int wasm_libs_register_{{ library.name }}_natives(const char* env) {
    {%- for function in library.functions.values() %}
    native_symbols_{{ library.name }}_library[{{ loop.index0 }}].func_ptr = {{ library.name }}_{{ function.name }}_ptr.void_ptr;
    {%- endfor %}

    if (!wasm_runtime_register_natives(env, native_symbols_{{ library.name }}_library, num_native_symbols_{{ library.name }}_library)) {
        printf("wasm_libs: could not register natives for library '%s'", "{{ library.name }}");
        return 0;
    }

    return num_native_symbols_{{ library.name }}_library;
}
{% endfor %}